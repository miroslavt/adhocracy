#
# adhocracy - Pylons testing environment configuration
#
[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[server:main]
use = egg:Paste#http
host = 127.0.0.1
port = 80

[app:main]
use = egg:adhocracy
full_stack = true
static_files = true
cache_dir = ${parts.buildout.directory}/var/testdata

#run functional integration tests
#run_integrationtests = true

#sqlalchemy.url = sqlite:///:memory:
sqlalchemy.url = sqlite:///${parts.buildout.directory}/var/testdata/test.db

# Add additional test specific configuration options as necessary.
adhocracy.setup.drop = KILL_EM_ALL
adhocracy.site.dir = ${parts.buildout.directory}/var/testdata/site
adhocracy.domain = test.lan

skip_migration = True
skip_authentication = False
skip_setupentities = True

# Redis is used to build a task queue that will be processed by the
# `worker` process.
# Note: host has to be an IP address, not a hostname
adhocracy.redis.host = ${parts.domains.redis}
adhocracy.redis.port = ${parts.ports.redis}
adhocracy.redis.queue = ${parts.adhocracy.queue}
adhocracy.background_processing = false

# disable delay
adhocracy.delay_update_queue_seconds = 0

# memcached 
memcached.server = 127.0.0.1:${parts.ports.memcached}

#solr
adhocracy.solr.url = http://${parts.solr.host}:${parts.solr.port}/solr

# beaker
beaker.session.key = adhocracy_state
beaker.session.secret = autogenerated
beaker.session.cookie_domain = test.lan
session.domain = test.lan
beaker.cache.data_dir = ${parts.buildout.directory}/var/testdata/cache
beaker.session.data_dir = ${parts.buildout.directory}/var/testdata/sessions

# Turn on all the bells and whistles
adhocracy.crypto.secret = geheim!
adhocracy.track_outgoing_links = True

adhocracy.login_type = openid,username+password,email+password,shibboleth
adhocracy.shibboleth.userbadge_mapping =[
    {
        "title": "editor",
        "function": "attribute_equals",
        "args": {
            "key": "shib-user-role",
            "value": "editor"
        }
    },
    {
        "title": "staff",
        "function": "attribute_equals",
        "args": {
            "key": "shib-user-role",
            "value": "staff"
        }
    }]


# Logging configuration
[loggers]
keys = root, adhocracy, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_adhocracy]
level = INFO
handlers =
qualname = adhocracy

[logger_sqlalchemy]
level = WARN
handlers = console
qualname = sqlalchemy.engine

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
